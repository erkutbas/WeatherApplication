//
//  HomePresenter.swift
//  WeatherApplication
//
//  Created by Erkut Bas on 31.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class HomePresenter {

    // MARK: - Private properties -

    private unowned let view: HomeViewInterface
    private let formatter: HomeFormatterInterface
    private let interactor: HomeInteractorInterface
    private let wireframe: HomeWireframeInterface

    // MARK: - Lifecycle -

    init(
        view: HomeViewInterface,
        formatter: HomeFormatterInterface,
        interactor: HomeInteractorInterface,
        wireframe: HomeWireframeInterface
    ) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    private func fireDataLoadingProcess() {
        interactor.getData { [weak self] result in
            switch result {
            case .failure(let error):
                break
            case .success(let response):
                self?.handleResponse(with: response)
            }
        }
    }
    
    private func handleResponse(with data: CharacterDataResponse) {
        // forward response to formatter
        formatter.setData(via: data)
        view.refreshView()
    }
}

// MARK: - Extensions -
extension HomePresenter: HomePresenterInterface {
    
    func viewDidLoad() {
        fireDataLoadingProcess()
    }
    
    func askData(at index: Int) -> GenericDataProtocol? {
        return formatter.askData(at: index)
    }
    
    func askNumberOfSection() -> Int {
        return formatter.askNumberOfSection()
    }
    
    func askNumberOfItem(in section: Int) -> Int {
        return formatter.askNumberOfItem(in: section)
    }
    
    func selectedItem(at index: Int) {
        print("index : \(index)")
        wireframe.goToDetailView(with: formatter.getItemId(at: index))
    }
    
}
